
(define-fun checkJugsInTwoSteps ((step Int)) Bool
    (or
        (and
            (or
                (= (+ (B 1 (+ step 1)) (B 2 (+ step 1)) ) (B 1 step))
                (= (+ (B 1 (+ step 1)) (B 2 (+ step 1)) ) (B 2 step))
            )
            (or
                (= (B 1 (+ step 1)) 0)
                (= (B 2 (+ step 1)) 5)
                (= (B 1 (+ step 1)) 8)
                (= (B 2 (+ step 1)) 0)
            )
        )
        (and
            (or
                (= (+ (B 1 (+ step 1)) (B 3 (+ step 1)) ) (B 1 step))
                (= (+ (B 1 (+ step 1)) (B 3 (+ step 1)) ) (B 3 step))   
            )
            (or
                 (= (B 1 (+ step 1)) 0)
                 (= (B 3 (+ step 1)) 3)
                 ;c->a ???
                 (= (B 1 (+ step 1)) 8)
                 (= (B 3 (+ step 1)) 0)
            )
        )
        (and
            (or
                (= (+ (B 2 (+ step 1)) (B 3 (+ step 1)) ) (B 2 step))
                (= (+ (B 2 (+ step 1)) (B 3 (+ step 1)) ) (B 3 step)) 
            )
            (or
                ;b->c
                (= (B 2 (+ step 1)) 5)
                (= (B 2 (+ step 1)) 0)
                (= (B 3 (+ step 1)) 3)
                (= (B 3 (+ step 1)) 0)
            )
        )
        

        ;(and
        ;    (= (+ (B 1 (+ step 1)) (B 2 (+ step 1)) ) (B 1 step))
        ;    (or
        ;        ;a->b
        ;        (= (B 1 (+ step 1)) 0)
        ;        (= (B 2 (+ step 1)) 5)
        ;        ;b->a
        ;        (= (B 2 (+ step 1)) 0)
        ;        (= (B 1 (+ step 1)) 8)
        ;    )
        ;)
        ;(and
        ;    (= (+ (B 1 (+ step 1)) (B 2 (+ step 1)) ) (B 2 step))
        ;    (or
        ;        ;a->b
        ;        (= (B 1 (+ step 1)) 0)
        ;        (= (B 2 (+ step 1)) 5)
        ;        ;b->a
        ;        (= (B 2 (+ step 1)) 0)
        ;        (= (B 1 (+ step 1)) 8)
        ;    )
        ;)
        ;(and
        ;    (= (+ (B 1 (+ step 1)) (B 3 (+ step 1)) ) (B 1 step))
        ;    (or
        ;        ;a->c
        ;        (= (B 1 (+ step 1)) 0)
        ;        (= (B 3 (+ step 1)) 3)
        ;        ;c->a ???
        ;        (= (B 1 (+ step 1)) 8)
        ;        (= (B 3 (+ step 1)) 0)
        ;    )
        ;)
        ;(and
        ;    (= (+ (B 1 (+ step 1)) (B 3 (+ step 1)) ) (B 3 step))
        ;    (or
        ;        ;a->c
        ;        (= (B 1 (+ step 1)) 0)
        ;        (= (B 3 (+ step 1)) 3)
        ;        ;c->a ???
        ;        (= (B 1 (+ step 1)) 8)
        ;        (= (B 3 (+ step 1)) 0)
        ;    )
        ;)
        ;(and
        ;    (= (+ (B 2 (+ step 1)) (B 3 (+ step 1)) ) (B 2 step))
        ;    (or
        ;        ;b->c
        ;        (= (B 2 (+ step 1)) 5)
        ;        (= (B 2 (+ step 1)) 0)
        ;        (= (B 3 (+ step 1)) 3)
        ;        (= (B 3 (+ step 1)) 0)
        ;    )
        ;)
        ;(and
        ;    (= (+ (B 2 (+ step 1)) (B 3 (+ step 1)) ) (B 3 step))
        ;    (or
        ;        ;b->c
        ;        (= (B 2 (+ step 1)) 5)
        ;        (= (B 2 (+ step 1)) 0)
        ;        (= (B 3 (+ step 1)) 3)
        ;        (= (B 3 (+ step 1)) 0)
        ;    )
        ;)
    )
)





  (Temp_sum 1 1 )
    (Temp_sum 1 2 )
    (Temp_sum 1 3 )
    (Temp_sum 1 4 )
    (Temp_sum 1 5 )
    (Temp_sum 1 6 )
    (Temp_sum 1 7 )
    (Temp_sum 1 8 )
    (Temp_sum 1 9 )
    (Temp_sum 1 10)
    (Temp_sum 1 11)
    (Temp_sum 1 12)

    (Temp_sum 2 1 )
    (Temp_sum 2 2 )
    (Temp_sum 2 3 )
    (Temp_sum 2 4 )
    (Temp_sum 2 5 )
    (Temp_sum 2 6 )
    (Temp_sum 2 7 )
    (Temp_sum 2 8 )
    (Temp_sum 2 9 )
    (Temp_sum 2 10)
    (Temp_sum 2 11)
    (Temp_sum 2 12)

    (Temp_sum 3 1 )
    (Temp_sum 3 2 )
    (Temp_sum 3 3 )
    (Temp_sum 3 4 )
    (Temp_sum 3 5 )
    (Temp_sum 3 6 )
    (Temp_sum 3 7 )
    (Temp_sum 3 8 )
    (Temp_sum 3 9 )
    (Temp_sum 3 10)
    (Temp_sum 3 11)
    (Temp_sum 3 12)

    (Temp_sum 4 1 )
    (Temp_sum 4 2 )
    (Temp_sum 4 3 )
    (Temp_sum 4 4 )
    (Temp_sum 4 5 )
    (Temp_sum 4 6 )
    (Temp_sum 4 7 )
    (Temp_sum 4 8 )
    (Temp_sum 4 9 )
    (Temp_sum 4 10)
    (Temp_sum 4 11)
    (Temp_sum 4 12)

    (Temp_sum 5 1 )
    (Temp_sum 5 2 )
    (Temp_sum 5 3 )
    (Temp_sum 5 4 )
    (Temp_sum 5 5 )
    (Temp_sum 5 6 )
    (Temp_sum 5 7 )
    (Temp_sum 5 8 )
    (Temp_sum 5 9 )
    (Temp_sum 5 10)
    (Temp_sum 5 11)
    (Temp_sum 5 12)

    (Temp_sum 6 1 )
    (Temp_sum 6 2 )
    (Temp_sum 6 3 )
    (Temp_sum 6 4 )
    (Temp_sum 6 5 )
    (Temp_sum 6 6 )
    (Temp_sum 6 7 )
    (Temp_sum 6 8 )
    (Temp_sum 6 9 )
    (Temp_sum 6 10)
    (Temp_sum 6 11)
    (Temp_sum 6 12)
    
    (Temp_sum 7 1 )
    (Temp_sum 7 2 )
    (Temp_sum 7 3 )
    (Temp_sum 7 4 )
    (Temp_sum 7 5 )
    (Temp_sum 7 6 )
    (Temp_sum 7 7 )
    (Temp_sum 7 8 )
    (Temp_sum 7 9 )
    (Temp_sum 7 10)
    (Temp_sum 7 11)
    (Temp_sum 7 12)
        
    (Temp_sum 8 1 )
    (Temp_sum 8 2 )
    (Temp_sum 8 3 )
    (Temp_sum 8 4 )
    (Temp_sum 8 5 )
    (Temp_sum 8 6 )
    (Temp_sum 8 7 )
    (Temp_sum 8 8 )
    (Temp_sum 8 9 )
    (Temp_sum 8 10)
    (Temp_sum 8 11)
    (Temp_sum 8 12)




(define-fun checkJugsInTwoSteps ((step Int)) Bool
    (or
        (and
            (or
                (= (+ (B 1 (+ step 1)) (B 2 (+ step 1)) ) (B 1 step))
                (= (+ (B 1 (+ step 1)) (B 2 (+ step 1)) ) (B 2 step))
            )  
            (or
                ;a->b
                (= (B 1 (+ step 1)) 0) 
                (= (B 2 (+ step 1)) 5)
                ;b->a
                (= (B 2 (+ step 1)) 0)
                (= (B 1 (+ step 1)) 8)
            )
        )
        (and
            (or
                (= (+ (B 1 (+ step 1)) (B 3 (+ step 1)) ) (B 1 step))
                (= (+ (B 1 (+ step 1)) (B 3 (+ step 1)) ) (B 3 step))
            )
            ;(or
            ;    ;a->c
            ;    (= (B 1 (+ step 1)) 0)
            ;    (= (B 3 (+ step 1)) 3)
            ;
            ;    ;(= (= (B 1 (+ step 1)) 0) (Temp_sum step 5))
            ;    ;(= (= (B 3 (+ step 1)) 3) (Temp_sum step 6))
            ;    ;c->a ???
            ;
            ;    (= (B 1 (+ step 1)) 8)
            ;    (= (B 3 (+ step 1)) 0)
            ;
            ;    ;(= (= (B 1 (+ step 1)) 8) (Temp_sum step 7))
            ;    ;(= (= (B 3 (+ step 1)) 0) (Temp_sum step 8))
            ;)
        )
        (and
            (or
                (= (+ (B 2 (+ step 1)) (B 3 (+ step 1)) ) (B 2 step))
                (= (+ (B 2 (+ step 1)) (B 3 (+ step 1)) ) (B 3 step))
            )
            (or
                (= (B 2 (+ step 1)) 0)
                (= (B 3 (+ step 1)) 3)

                ;(= (= (B 2 (+ step 1)) 0) (Temp_sum step 9))
                ;(= (= (B 3 (+ step 1)) 3) (Temp_sum step 10))
                ;c->a ???
                (= (B 2 (+ step 1)) 5)
                (= (B 3 (+ step 1)) 0)

                ;(= (= (B 2 (+ step 1)) 5) (Temp_sum step 11))
                ;(= (= (B 3 (+ step 1)) 0) (Temp_sum step 12))
            )
        )
    )
)